// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: event_query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    title,
    description,
    banner,
    icon,
    admin_id,
    start_time,
    end_time,
    location,
    total_seats,
    available_seats,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
) RETURNING id, title, description, banner, icon, admin_id, start_time, end_time, location, total_seats, available_seats, created_at, updated_at
`

type CreateEventParams struct {
	Title          string
	Description    string
	Banner         string
	Icon           string
	AdminID        pgtype.UUID
	StartTime      pgtype.Timestamptz
	EndTime        pgtype.Timestamptz
	Location       pgtype.Text
	TotalSeats     int32
	AvailableSeats int32
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Title,
		arg.Description,
		arg.Banner,
		arg.Icon,
		arg.AdminID,
		arg.StartTime,
		arg.EndTime,
		arg.Location,
		arg.TotalSeats,
		arg.AvailableSeats,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Banner,
		&i.Icon,
		&i.AdminID,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.TotalSeats,
		&i.AvailableSeats,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, title, description, banner, icon, admin_id, start_time, end_time, location, total_seats, available_seats, created_at, updated_at FROM events
WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id pgtype.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Banner,
		&i.Icon,
		&i.AdminID,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.TotalSeats,
		&i.AvailableSeats,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, title, description, banner, icon, admin_id, start_time, end_time, location, total_seats, available_seats, created_at, updated_at FROM events
    ORDER BY start_time DESC
LIMIT $1 OFFSET $2
`

type ListEventsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Banner,
			&i.Icon,
			&i.AdminID,
			&i.StartTime,
			&i.EndTime,
			&i.Location,
			&i.TotalSeats,
			&i.AvailableSeats,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventsByAdmin = `-- name: ListEventsByAdmin :many
SELECT id, title, description, banner, icon, admin_id, start_time, end_time, location, total_seats, available_seats, created_at, updated_at FROM events
    WHERE admin_id = $1
ORDER BY start_time DESC
`

func (q *Queries) ListEventsByAdmin(ctx context.Context, adminID pgtype.UUID) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEventsByAdmin, adminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Banner,
			&i.Icon,
			&i.AdminID,
			&i.StartTime,
			&i.EndTime,
			&i.Location,
			&i.TotalSeats,
			&i.AvailableSeats,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchByName = `-- name: SearchByName :many
SELECT id, title, description, banner, icon, admin_id, start_time, end_time, location, total_seats, available_seats, created_at, updated_at FROM events
    WHERE title ILIKE '%' || $1 || '%'
    OR description ILIKE '%' || $1 || '%'
    ORDER BY start_time DESC
LIMIT $2 OFFSET $3
`

type SearchByNameParams struct {
	Column1 pgtype.Text
	Limit   int32
	Offset  int32
}

func (q *Queries) SearchByName(ctx context.Context, arg SearchByNameParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, searchByName, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Banner,
			&i.Icon,
			&i.AdminID,
			&i.StartTime,
			&i.EndTime,
			&i.Location,
			&i.TotalSeats,
			&i.AvailableSeats,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET
    title = $2,
    description = $3,
    banner = $4,
    icon = $5,
    admin_id = $6,
    start_time = $7,
    end_time = $8,
    location = $9,
    total_seats = $10,
    available_seats = $11,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, description, banner, icon, admin_id, start_time, end_time, location, total_seats, available_seats, created_at, updated_at
`

type UpdateEventParams struct {
	ID             pgtype.UUID
	Title          string
	Description    string
	Banner         string
	Icon           string
	AdminID        pgtype.UUID
	StartTime      pgtype.Timestamptz
	EndTime        pgtype.Timestamptz
	Location       pgtype.Text
	TotalSeats     int32
	AvailableSeats int32
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Banner,
		arg.Icon,
		arg.AdminID,
		arg.StartTime,
		arg.EndTime,
		arg.Location,
		arg.TotalSeats,
		arg.AvailableSeats,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Banner,
		&i.Icon,
		&i.AdminID,
		&i.StartTime,
		&i.EndTime,
		&i.Location,
		&i.TotalSeats,
		&i.AvailableSeats,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
