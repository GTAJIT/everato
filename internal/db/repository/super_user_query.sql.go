// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: super_user_query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSuperUserIfNotExists = `-- name: CreateSuperUserIfNotExists :one
INSERT INTO super_users (username, email, password, role, permissions)
SELECT
    $1::VARCHAR,
    $2::VARCHAR,
    $3::VARCHAR,
    'SUPER_ADMIN'::SUPER_USER_ROLE,
    ARRAY[
        'MANAGE_EVENTS',
        'CREATE_EVENT',
        'EDIT_EVENT',
        'DELETE_EVENT',
        'VIEW_EVENT',
        'MANAGE_BOOKINGS',
        'CREATE_BOOKING',
        'EDIT_BOOKING',
        'DELETE_BOOKING',
        'VIEW_BOOKING',
        'MANAGE_USERS',
        'VIEW_REPORTS'
    ]::PERMISSIONS[]
WHERE NOT EXISTS (
    SELECT 1 FROM super_users WHERE username = $1::VARCHAR OR email = $2::VARCHAR
)
RETURNING id, email, password, role, permissions::text[], created_at, updated_at, username
`

type CreateSuperUserIfNotExistsParams struct {
	Column1 string
	Column2 string
	Column3 string
}

type CreateSuperUserIfNotExistsRow struct {
	ID          pgtype.UUID
	Email       string
	Password    string
	Role        SuperUserRole
	Permissions []string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Username    string
}

func (q *Queries) CreateSuperUserIfNotExists(ctx context.Context, arg CreateSuperUserIfNotExistsParams) (CreateSuperUserIfNotExistsRow, error) {
	row := q.db.QueryRow(ctx, createSuperUserIfNotExists, arg.Column1, arg.Column2, arg.Column3)
	var i CreateSuperUserIfNotExistsRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}
